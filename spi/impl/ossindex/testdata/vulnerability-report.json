[
  {
    "coordinates": "pkg:maven/log4j/log4j@1.2.17",
    "description": "",
    "reference": "https://ossindex.sonatype.org/component/pkg:maven/log4j/log4j@1.2.17?utm_source=mozilla&utm_medium=integration&utm_content=5.0",
    "vulnerabilities": [
      {
        "id": "e6e4ebea-da12-4bde-8f24-6272925ad093",
        "displayName": "CVE-2019-17571",
        "title": "[CVE-2019-17571] Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserializat...",
        "description": "Included in Log4j 1.2 is a SocketServer class that is vulnerable to deserialization of untrusted data which can be exploited to remotely execute arbitrary code when combined with a deserialization gadget when listening to untrusted network traffic for log data. This affects Log4j versions up to 1.2 up to 1.2.17.",
        "cvssScore": 9.8,
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "cve": "CVE-2019-17571",
        "reference": "https://ossindex.sonatype.org/vulnerability/e6e4ebea-da12-4bde-8f24-6272925ad093?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2019-17571"
        ]
      },
      {
        "id": "4a7955ac-037c-42bc-a83e-b51efe2490af",
        "displayName": "CVE-2021-4104",
        "title": "[CVE-2021-4104] JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when...",
        "description": "JMSAppender in Log4j 1.2 is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration. The attacker can provide TopicBindingName and TopicConnectionFactoryBindingName configurations causing JMSAppender to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-44228. Note this issue only affects Log4j 1.2 when specifically configured to use JMSAppender, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.\n\n\n===================================================\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n===================================================\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j:log4j` package is vulnerable to Deserialization of Untrusted Data. The `lookup()` and `activateOptions()` methods in the `JMSAppender` class allow `JNDI` lookup requests to be made when the `TopicBindingName` and `TopicConnectionFactoryBindingName` specify a trusted host. Lookups made to this host may be used by attackers to request a serialized malicious Java Object that can be deserialized and executed, leading to Remote Code Execution (RCE). \n\nNote that this vulnerability is different from CVE-2021-44228 and requires the attacker to be in control of the third party host that is specified in the configuration, or write access to the Log4j configuration file in order to specify a malicious lookup host directly. This vulnerability also only affects the 1.x.x component of `Log4j` released under the `log4j:log4j` group and artifact IDs.\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in all versions of log4j:log4j, not just in the 1.2.x branch as the advisory states. \n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component under the following circumstances:\n\n- The configuration file specifies an allowed third-party `JNDI` lookup host for the `JMSAppender`\n- the `javax.jms.*` API is included in the application's `CLASSPATH`\n\nReference: https://bugzilla.redhat.com/show_bug.cgi?id=2031667#c28\n\n\nRecommendation\n---------------------------------------------------\n\nThe 1.x.x component has reach `End of Life`, and users should upgrade to a non-vulnerable version of `org.apache.logging.log4j:log4j-core` as this component includes other security vulnerabilities that are not fixed.\n\nReferences:\n- https://github.com/apache/logging-log4j2/pull/608#issuecomment-990494126\n- https://logging.apache.org/log4j/1.2/\n",
        "cvssScore": 8.1,
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "cve": "CVE-2021-4104",
        "reference": "https://ossindex.sonatype.org/vulnerability/4a7955ac-037c-42bc-a83e-b51efe2490af?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2021-4104"
        ]
      },
      {
        "id": "d3477f9c-032a-44a7-a5e1-02ae35e4737c",
        "displayName": "CVE-2020-9488",
        "title": "[CVE-2020-9488] Improper validation of certificate with host mismatch in Apache Log4j SMTP appen...",
        "description": "Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.",
        "cvssScore": 3.7,
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "cve": "CVE-2020-9488",
        "reference": "https://ossindex.sonatype.org/vulnerability/d3477f9c-032a-44a7-a5e1-02ae35e4737c?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2020-9488"
        ]
      }
    ]
  },
  {
    "coordinates": "pkg:maven/log4j/log4j@2.14.0",
    "description": "",
    "reference": "https://ossindex.sonatype.org/component/pkg:maven/log4j/log4j@2.14.0?utm_source=mozilla&utm_medium=integration&utm_content=5.0",
    "vulnerabilities": [
      {
        "id": "7cc258a5-d3ab-451f-bd27-415ae0e3b457",
        "displayName": "CVE-2021-45105",
        "title": "[CVE-2021-45105] Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not prot...",
        "description": "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3.\n\n\n===================================================\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n===================================================\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to Denial of Service (DoS) due to Uncontrolled Recursion. The methods and classes listed below allow for recursive evaluation of lookups with user-supplied inputs. Remote attackers with control over `Thread Context Map` data can supply specially-crafted inputs containing a recursive lookup. This will result in the process terminating when the logging configuration uses a non-default `Pattern Layout` with a `Context Lookup`, leading to a DoS condition.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/lookup/StrSubstitutor.class\n* replace()\n* substitute()\n\norg/apache/logging/log4j/core/config/AbstractConfiguration.class\n* initialize()\n* doConfigure()\n\n*Note:* The Attack Complexity of this vulnerability is still being discussed with the maintainers. We have deemed it High at this time due to the specific configuration necessary for the vulnerability to be exploited. \n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component when the logging configuration uses a non-default Pattern Layout with a Context Lookup (for example, `$${ctx:loginId}`)\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nMitigating controls from the project advisory:\n```\nImplement one of the following mitigation techniques:\n\nJava 8 (or later) users should upgrade to release 2.17.0.\nAlternatively, this can be mitigated in configuration:\n\nIn PatternLayout in the logging configuration, replace Context Lookups like ${ctx:loginId} or $${ctx:loginId} with Thread Context Map patterns (%X, %mdc, or %MDC).\nOtherwise, in the configuration, remove references to Context Lookups like ${ctx:loginId} or $${ctx:loginId} where they originate from sources external to the application such as HTTP headers or user input.\n```\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n",
        "cvssScore": 7.5,
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "cve": "CVE-2021-45105",
        "reference": "https://ossindex.sonatype.org/vulnerability/7cc258a5-d3ab-451f-bd27-415ae0e3b457?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2021-45105"
        ]
      },
      {
        "id": "9e818913-69a3-41c8-9bcc-6293b378c53a",
        "displayName": "OSSINDEX-6293-b378-c53a",
        "title": "CWE-502: Deserialization of Untrusted Data",
        "description": "The component 'Log4j' is vulnerable to CWE-502.The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.[For version 2.0-beta9., For version 2.0-rc1., For version 2.0-rc2., From version 2.0.0 up to and including 2.14.1.]",
        "cvssScore": 10,
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "reference": "https://ossindex.sonatype.org/vulnerability/9e818913-69a3-41c8-9bcc-6293b378c53a?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": []
      },
      {
        "id": "f0ac54b6-9b81-45bb-99a4-e6cb54749f9d",
        "displayName": "CVE-2021-44228",
        "title": "[CVE-2021-44228] Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and pa...",
        "description": "Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. In previous releases (>2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting \"com.sun.jndi.rmi.object.trustURLCodebase\" and \"com.sun.jndi.cosnaming.object.trustURLCodebase\" to \"false\".\n\n\n===================================================\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n===================================================\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to Deserialization of Untrusted data. The vulnerable methods allow the `JNDI` Java interface to be used to request resources from arbitrary URIs using the `LDAP` and `LDAPS` protocols. This leads to Java objects contained within the resource to be deserialized and processed. Applications that use the `log4j-core` library to log events and utilize application data in log messages may inadvertently allow user input to be included inside their log messages. Remote attackers can leverage this behavior to fetch a malicious resource under their control. This would lead to malicious Java code being deserialized and executed in the context of the vulnerable application and may lead to Remote Code Execution (RCE).\n\n*Advisory Deviation Notice:* The Sonatype security research team discovered that the root cause of the vulnerability is in `org.apache.logging.log4j:log4j-core`, and is not in `org.apache.logging.log4j:log4j-api` as the GitHub advisory states. The research team has also discovered that the vulnerable code was introduced in version 2.0-beta9 up to 2.12.2, and 2.13.0 up to 2.15.0, and not all versions before 2.15.0 as the GitHub advisory states. The 1.x branch is not affected by this vulnerability.\n\n*Vulnerable File(s) and Function(s)*:\n\norg/apache/logging/log4j/core/net/JndiManager.class\n* lookup()\n\norg/apache/logging/log4j/core/lookup/JndiLookup.class\n* lookup()\n\norg/apache/logging/log4j/core/appender/mom/JmsAppender$Builder.class\n* build()\n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component and including formatted message substitutions in their application's logged messages where formatted message lookups are enabled. Note that this is the default behavior in all versions prior to 2.15.0.\n\nReference: https://github.com/advisories/GHSA-jfh8-c2jp-5v3q\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\n**Project Recommendations**\n\n* Java 8 (or later) users should upgrade to release 2.16.0.\n* Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).\n* Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n",
        "cvssScore": 10,
        "cvssVector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "cve": "CVE-2021-44228",
        "reference": "https://ossindex.sonatype.org/vulnerability/f0ac54b6-9b81-45bb-99a4-e6cb54749f9d?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2021-44228"
        ]
      },
      {
        "id": "edaf092e-e7f3-4c69-8f01-a5c6fc44890a",
        "displayName": "CVE-2021-45046",
        "title": "[CVE-2021-45046] It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was i...",
        "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in a denial of service (DOS) attack. Log4j 2.15.0 restricts JNDI LDAP lookups to localhost by default. Note that previous mitigations involving configuration such as to set the system property `log4j2.noFormatMsgLookup` to `true` do NOT mitigate this specific vulnerability. Log4j 2.16.0 fixes this issue by removing support for message lookup patterns and disabling JNDI functionality by default. This issue can be mitigated in prior releases (<2.16.0) by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).\n\n\n===================================================\nThe following information is provided by Sonatype Nexus Intelligence. Nexus Intelligence is the only security research service that performs \"secondary expansion\" to determine if newly discovered vulnerabilities are also present in other components.\n\nLearn more about Nexus Intelligence -- https://www.sonatype.com/products/intelligence\n===================================================\n\n\nExplanation\n---------------------------------------------------\n\nThe `log4j-core` package is vulnerable to the Use of an Externally-Controlled Format String. The `format()` method in the `MessagePatternConverter` and `MessagePatternConverter$LookupMessagePatternConverter` classes allow `JNDI LDAP` lookups to be made to remote hosts by default while logging application events. If the data retrieved is used to control the input data utilized in `Thread Context Maps` or `Context Lookups`, an attacker with control over a logged value may craft a malicious JNDI lookup string that causes `log4j` to crash. This may result in undefined behavior in applications utilizing `log4j-core`, and can lead to a Denial of Service (DoS) condition.\n\nNote: This vulnerability is a follow-up to CVE-2021-44228 to address the DoS attack vector.\n\n\nDetection\n---------------------------------------------------\n\nThe application is vulnerable by using this component.\n\n\nRecommendation\n---------------------------------------------------\n\nWe recommend upgrading to a version of this component that is not vulnerable to this specific issue.\n\nNote: If this component is included as a bundled/transitive dependency of another component, there may not be an upgrade path. In this instance, we recommend contacting the maintainers who included the vulnerable package. Alternatively, we recommend investigating alternative components or a potential mitigating control.\n\nMitigating controls from the project advisory:\n\n* Java 8 (or later) users should upgrade to release 2.16.0.\n* Users requiring Java 7 should upgrade to release 2.12.2 when it becomes available (work in progress, expected to be available soon).\n* Otherwise, remove the JndiLookup class from the classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class\n\nReference: https://logging.apache.org/log4j/2.x/security.html\n",
        "cvssScore": 3.7,
        "cvssVector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "cve": "CVE-2021-45046",
        "reference": "https://ossindex.sonatype.org/vulnerability/edaf092e-e7f3-4c69-8f01-a5c6fc44890a?component-type=maven&component-name=log4j.log4j&utm_source=mozilla&utm_medium=integration&utm_content=5.0",
        "externalReferences": [
          "https://nvd.nist.gov/vuln/detail/CVE-2021-45046"
        ]
      }
    ]
  }
]